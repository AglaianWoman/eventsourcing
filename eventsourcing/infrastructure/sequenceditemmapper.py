from __future__ import unicode_literals

import hashlib
import random
from abc import ABCMeta, abstractmethod

import six

from eventsourcing.infrastructure.sequenceditem import SequencedItem, SequencedItemFieldNames
from eventsourcing.utils.topic import get_topic, resolve_topic
from eventsourcing.utils.transcoding import ObjectJSONDecoder, ObjectJSONEncoder, json_dumps, json_loads


class AbstractSequencedItemMapper(six.with_metaclass(ABCMeta)):
    @abstractmethod
    def to_sequenced_item(self, domain_event):
        """
        Returns sequenced item for given domain event.
        """

    @abstractmethod
    def from_sequenced_item(self, sequenced_item):
        """
        Return domain event from given sequenced item.
        """


class SequencedItemMapper(AbstractSequencedItemMapper):
    """
    Uses JSON to transcode domain events.
    """

    def __init__(self, sequenced_item_class=SequencedItem, sequence_id_attr_name=None, position_attr_name=None,
                 json_encoder_class=ObjectJSONEncoder, json_decoder_class=ObjectJSONDecoder,
                 cipher=None, other_attr_names=()):
        self.sequenced_item_class = sequenced_item_class
        self.json_encoder_class = json_encoder_class
        self.json_decoder_class = json_decoder_class
        self.cipher = cipher
        self.field_names = SequencedItemFieldNames(self.sequenced_item_class)
        self.sequence_id_attr_name = sequence_id_attr_name or self.field_names.sequence_id
        self.position_attr_name = position_attr_name or self.field_names.position
        self.other_attr_names = other_attr_names or self.field_names.other_names

    def to_sequenced_item(self, domain_event):
        """
        Constructs a sequenced item from a domain event.
        """
        item_args = self.construct_item_args(domain_event)
        return self.construct_sequenced_item(item_args)

    def construct_item_args(self, domain_event):
        """
        Constructs attributes of a sequenced item from the given domain event.
        """
        # Copy the state of the event.
        event_attrs = domain_event.__dict__.copy()

        # Get the sequence ID.
        sequence_id = event_attrs.pop(self.sequence_id_attr_name)

        # Get the position in the sequence.
        position = event_attrs.pop(self.position_attr_name)

        # Get the topic from the event attrs, otherwise from the class.
        topic = get_topic(domain_event.__class__)

        # Serialise the remaining event attribute values.
        data = json_dumps(event_attrs, cls=self.json_encoder_class)

        # Encrypt (optional).
        if self.cipher:
            # Make a unique 96 bit nonce for encrypting item data.
            # 96 bits is the length of AES_GCM nonce recommended by NIST.
            # Here, 10 bytes are determined by the sequence ID and position.
            seqidposn = "{}{}".format(sequence_id, position)
            nonce_fixed = hashlib.sha256(seqidposn.encode()).digest()[:10]
            assert len(nonce_fixed) == 10, len(nonce_fixed)
            # 2 bytes are generated by a pseudo RNG.
            # - there's probably an easier way of doing this for both Python 2 and 3
            nonce_rand = hashlib.sha256(str(random.random()).encode()).digest()[:2]
            assert len(nonce_rand) == 2, len(nonce_rand)
            nonce = nonce_fixed + nonce_rand
            assert len(nonce) == 12, len(nonce)
            # NB Because the AES-GCM cipher doesn't require an
            # unpredictable initialisation vector, but rather
            # a unique value (nonce), the item's sequence ID
            # and position will be unique for each item's ciphered
            # data once it is in the database. However that is
            # insufficient, because item data is ciphered before
            # it is controlled for concurrency. If only the sequence
            # and position are used for the nonce then many items
            # could have their data ciphered with the same nonce.
            # If such messages could somehow be seen before being
            # rejected by the database, they could also potentially
            # be used to break the encryption. Involving a pseudo-random
            # number generator avoids this issue with a very high degree
            # of probability. The function random.getrandbits() is much
            # fast than os.urandom(), and is acceptable here since the
            # random bits don't have to be unpredictable, just unique
            # amongst all the threads that are about to experience a
            # concurrency error. This behaviour means the nonce isn't
            # suitable as an initialisation vector for a cipher mode
            # that requires an unpredictable initialisation vector,
            # such as AES-CBC.
            data = self.cipher.encrypt(data, nonce)

        # Get the 'other' args.
        # - these are meant to be derivative of the other attributes,
        #   to populate database fields, and shouldn't affect the hash.
        other_args = tuple((getattr(domain_event, name) for name in self.other_attr_names))

        return (sequence_id, position, topic, data) + other_args

    def construct_sequenced_item(self, item_args):
        return self.sequenced_item_class(*item_args)

    def from_sequenced_item(self, sequenced_item):
        """
        Reconstructs domain event from stored event topic and
        event attrs. Used in the event store when getting domain events.
        """
        assert isinstance(sequenced_item, self.sequenced_item_class), (
            self.sequenced_item_class, type(sequenced_item)
        )

        # Get the sequence ID, position, topic, data, and hash.
        sequence_id = getattr(sequenced_item, self.field_names.sequence_id)
        position = getattr(sequenced_item, self.field_names.position)
        topic = getattr(sequenced_item, self.field_names.topic)
        data = getattr(sequenced_item, self.field_names.data)

        # Decrypt (optional).
        if self.cipher:
            data = self.cipher.decrypt(data)

        # Deserialize.
        event_attrs = json_loads(data, cls=self.json_decoder_class)

        # Resolve topic to event class.
        domain_event_class = resolve_topic(topic)

        # Set the sequence ID and position.
        event_attrs[self.sequence_id_attr_name] = sequence_id
        event_attrs[self.position_attr_name] = position

        # Reconstruct the domain event object.
        return reconstruct_object(domain_event_class, event_attrs)


def reconstruct_object(obj_class, obj_state):
    obj = object.__new__(obj_class)
    obj.__dict__.update(obj_state)
    return obj
